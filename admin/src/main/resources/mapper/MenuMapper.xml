<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cakemonster.admin.dao.MenuMapper">

    <resultMap type="com.cakemonster.admin.model.entity.Menu" id="MenuMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="url" column="url" jdbcType="VARCHAR"/>
        <result property="path" column="path" jdbcType="VARCHAR"/>
        <result property="component" column="component" jdbcType="VARCHAR"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="iconCls" column="icon_cls" jdbcType="VARCHAR"/>
        <result property="keepAlive" column="keep_alive" jdbcType="INTEGER"/>
        <result property="requireAuth" column="require_auth" jdbcType="INTEGER"/>
        <result property="parentId" column="parent_id" jdbcType="INTEGER"/>
        <result property="enabled" column="enabled" jdbcType="INTEGER"/>
        <result property="creator" column="creator" jdbcType="VARCHAR"/>
        <result property="modifier" column="modifier" jdbcType="VARCHAR"/>
        <result property="gmtCreate" column="gmt_create" jdbcType="TIMESTAMP"/>
        <result property="gmtModify" column="gmt_modify" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 批量插入 -->
    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into menu
        (url,path,component,name,icon_cls,keep_alive,require_auth,parent_id,enabled,creator,modifier,gmt_create,gmt_modify)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.url}#{entity.path}#{entity.component}#{entity.name}#{entity.iconCls}#{entity.keepAlive}#{entity.requireAuth}#{entity.parentId}#{entity.enabled}#{entity.creator}#{entity.modifier}#{entity.gmtCreate}#{entity.gmtModify})
        </foreach>
    </insert>
    <!-- 批量插入或按主键更新 -->
    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into menu
        (url,path,component,name,icon_cls,keep_alive,require_auth,parent_id,enabled,creator,modifier,gmt_create,gmt_modify)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.url}#{entity.path}#{entity.component}#{entity.name}#{entity.iconCls}#{entity.keepAlive}#{entity.requireAuth}#{entity.parentId}#{entity.enabled}#{entity.creator}#{entity.modifier}#{entity.gmtCreate}#{entity.gmtModify})
        </foreach>
        on duplicate key update
        url = values(url) path = values(path) component = values(component) name = values(name) icon_cls =
        values(icon_cls) keep_alive = values(keep_alive) require_auth = values(require_auth) parent_id =
        values(parent_id) enabled = values(enabled) creator = values(creator) modifier = values(modifier) gmt_create =
        values(gmt_create) gmt_modify = values(gmt_modify)
    </insert>

    <resultMap id="MenuWithChildren" type="com.cakemonster.admin.model.vo.MenuVO" extends="MenuMap">
        <collection property="children" ofType="com.cakemonster.admin.model.vo.MenuVO">
            <id property="id" column="id2"/>
            <result property="component" column="component2"/>
            <result property="name" column="name2"/>
            <result property="path" column="path2"/>
        </collection>
    </resultMap>
    <resultMap id="MenuWithRole" type="com.cakemonster.admin.model.dto.MenuRoleDTO" extends="MenuMap">
        <collection property="roles" ofType="com.cakemonster.admin.model.entity.Role">
            <id property="id" column="rid"/>
            <result property="name" column="rname"/>
            <result property="nameZh" column="rnameZh"/>
        </collection>
    </resultMap>

    <select id="getMenusByHrId" resultMap="MenuWithChildren">
        select m1.*, m2.`id` as id2, m2.`name` as name2, m2.`path` as path2, m2.`component` as component2
        from menu m1,
             menu m2,
             menu_role mr,
             user_role ur
        where m1.`id` = m2.`parent_id`
          and m2.`id` = mr.`menu_id`
          and mr.`role_id` = ur.`role_id`
          and ur.`user_id` = #{userId}
        order by m1.id, m2.id
    </select>
    <select id="getAllMenusWithRole" resultMap="MenuWithRole">
        select m.*, r.id as rid, r.name as rname, r.name_zh as rnameZh
        from menu m
                 left join menu_role mr on m.id = mr.menu_id
                 left join role r on mr.role_id = r.id
        order by m.id
    </select>

</mapper>

